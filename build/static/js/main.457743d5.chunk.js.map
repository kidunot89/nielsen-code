{"version":3,"sources":["styled.js","graph-functions.js","bar-graph.js","app.js","parse-csv.js","serviceWorker.js","index.js"],"names":["Loading","posed","span","enter","applyAtStart","display","opacity","x","y","transition","type","values","duration","exit","applyAtEnd","initialPose","ErrMsg","p","scale","Wrapper","styled","div","_templateObject","BarGraph","_templateObject2","graphColors","Bar","_ref","sortBy","data","max","colors","react_default","a","createElement","className","map","value","key","style","height","concat","backgroundColor","barGraph","_ref2","rawData","isEmpty","slice","columns","splice","console","log","_useState","useState","_useState2","Object","slicedToArray","setSortBy","rows","row","formatted","each","colName","i","reduce","result","next","getMax","index","length","getColors","react","onChange","event","target","bar_graph_Bar","App","file","useRef","setData","_useState3","_useState4","errMsg","setErrorMsg","_useState5","_useState6","loading","setLoading","onSubmit","preventDefault","selectedFile","get","fileReader","FileReader","onloadend","strData","strDelimiter","arrMatches","objPattern","RegExp","arrData","exec","strMatchedDelimiter","push","strMatchedValue","replace","isNaN","parseInt","isEqual","NaN","parseCSV","readAsText","htmlFor","ref","accept","pose","bar_graph","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.457743d5.chunk.js","sourcesContent":["// styled.js\n/**\n * External dependencies\n */\nimport posed from 'react-pose';\nimport styled from 'styled-components';\n\n/**\n * Provides transition states for loading dialogue\n */\nexport const Loading = posed.span({\n  enter: {\n    applyAtStart: { display: 'block' },\n    opacity: 1,\n    x: '-50%',\n    y: '-50%',\n    transition: {\n      x: {\n        type: 'keyframes',\n        values: ['-150%', '-50%'],\n        duration: 600,\n      }\n    }\n  },\n  exit: {\n    applyAtEnd: { display: 'none' },\n    opacity: 0,\n    x: '100%',\n    y: '-50%',\n    transition: {\n      x: {\n        type: 'keyframes',\n        values: ['-50%', '100%'],\n        duration: 500,\n      }\n    }\n  },\n  initialPose: 'exit',\n})\n\n/**\n * Provides transition states for error message\n */\nexport const ErrMsg = posed.p({\n  enter: { scale: 1 },\n  exit: { scale: 0 },\n  initialPose: 'exit',\n});\n\n/**\n * Provides styling for the app's wrapping div element and form element. \n */\nexport const Wrapper = styled.div`\n  position: relative;\n  margin: 0 auto;\n  width: 100%;\n  max-width: 646px;\n  text-align: center;\n\n  form {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: stretch;\n    label {\n      padding: 1em 1em;\n    }\n    input {\n      margin: 1em 1em 1em auto;\n      flex-basis: 45%;\n    }\n    p {\n      color: #a94442;\n      margin-top: -0.5em;\n      flex-basis: 100%;\n      font-size: 85%;\n    }\n    button {\n      padding: 1em;\n      margin-top: 1em;\n      font-size: 125%;\n      font-weight: 600;\n      background-color: #595959;\n      color: #f4f4f4;\n      border: none;\n      flex-basis: 100%;\n    }\n  }\n\n  .loading {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    z-index: 999;\n    width: 100%;\n    max-width: 400px;\n    height: 100px;\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #d9edf7;\n    color: #31708f;\n  }\n\n  .key-column {\n    text-align: left;\n    select{ margin: 1em 0 1em 1em; }\n  }\n`;\n\n\n/**\n * styled bar graph wrapping div element\n */\nexport const BarGraph = styled.div`\n  width: 100%;\n  max-width: 646px;\n  height: 500px;\n  display: flex;\n  flex-flow: row wrap;\n  align-items: flex-start;\n  padding-top: 2em;\n\n  .row {\n    height: 100%;\n    display: flex;\n    flex-flow: column nowrap;\n\n    .bars {\n      height: 100%;\n      margin: 0 1em;\n      display: flex;\n      flex-wrap: wrap;\n      align-items: flex-end;\n      .bar {\n        width: 45px;\n\n        .text {\n          margin-top: -1.5em;\n        }\n      }\n    }\n\n    .row-text { margin: 0.5 auto; }\n  }\n`;","// colors.js\n/**\n * External dependencies\n */\nimport { each, reduce } from 'lodash';\n\n// Graph colors\nconst graphColors = [\n  'rgba(101, 13, 27, 1)',\n  'rgba(130, 50, 0, 1)',\n  'rgba(155, 61, 18, 1)',\n  'rgba(174, 142, 28, 1)',\n  'rgba(193, 223, 31, 1)',\n];\n\n/**\n * Simple function for mapping colors to columns\n */\nexport const getColors = (columns) => {\n  let index = 0;\n  const colors = {};\n  each(columns, (colName) => {\n    if (index > colors.length -1) {\n      index = 0;\n    }\n    colors[colName] = graphColors[index];\n    index += 1;\n  });\n\n  return colors;\n}\n\n/**\n * Simple function for calculating max value for each property\n */\nexport const getMax = (rows, columns) => reduce(rows, (result, next) => {\n  each(columns, colName => {\n    result[colName] = (result[colName] && result[colName] > next[colName])\n    ? result[colName]\n    : next[colName];\n  });\n\n  return result;\n}, {});","// bar-graph.js\n/**\n * External dependencies\n */\nimport React, { Fragment, useState } from 'react';\nimport { map, each, isEmpty } from 'lodash';\n\n/**\n * Local dependencies\n */\nimport { BarGraph } from './styled';\nimport { getColors, getMax } from './graph-functions';\n\n/**\n * Renders individual bar in graph\n * \n * @returns {React.Component}\n */\nconst Bar = ({ sortBy, data, max, colors }) => (\n  <div className=\"row\">\n    <div className=\"bars\">\n      {map(data, (value, key) =>{\n        if (key === sortBy) return null;\n        return (\n          <div\n            key={key}\n            className=\"bar\"\n            style={{\n              height: `${value / max[key] * 100}%`,\n              backgroundColor: colors[key],\n            }}\n          >\n            <p className=\"text\">{value}</p>\n          </div>\n        );\n      })}\n    </div>\n    <h3 className=\"row-text\">{data[sortBy]}</h3>\n  </div>\n);\n\n /**\n  * BarGraph\n  * renders bar graph from value in provided `data` prop\n  * \n  * @returns {React.Component}  \n  */\nconst barGraph = ({ data: rawData }) => {\n  if (isEmpty(rawData)) return null;\n\n  // Clone data to prevent mutation\n  const data = rawData.slice();\n  // Get heading row\n  const columns = data.splice(0, 1)[0];\n  console.log(columns, data);\n  \n  // Sorting state\n  const [sortBy, setSortBy] = useState(columns[0]);\n\n  // Format data\n  const rows = map(data, (row) => {\n    const formatted = {};\n    each(columns, (colName, i) => formatted[colName] = row[i]);\n    return formatted;\n  });\n\n  // Get max values and graph colors\n  const max = getMax(rows, columns);\n  const colors = getColors(columns);\n  \n  return (\n    <Fragment>\n      <label className=\"key-column\">\n        Key Column:\n        <select value={sortBy} onChange={event => setSortBy(event.target.value)}>\n          {map(columns, value => <option value={value}>{value}</option>)}\n        </select>\n      </label>\n      <BarGraph>\n        { map(rows, (row, i) => (\n          <Bar\n            key={`row-${i+row[sortBy]}`}\n            sortBy={sortBy}\n            data={row}\n            max={max}\n            colors={colors} />\n        ))}\n      </BarGraph>\n    </Fragment>\n  );\n};\n\nexport default barGraph;","// app.js\n/**\n * External dependencies\n */\nimport React, { useState, useRef } from 'react';\nimport { get } from 'lodash';\n\n/**\n * Local dependencies\n */\nimport BarGraph from './bar-graph';\nimport parseCSV from './parse-csv';\nimport { Loading, ErrMsg, Wrapper } from './styled';\n\n/**\n * App Component\n * Reads and graphs csv files.\n * \n * @returns { React.Component }\n */\nconst App = () => {\n  // Selected file\n  const file = useRef(null);\n  // Parsed CSV data\n  const [data, setData] = useState(null);\n  // Error message\n  const [errMsg, setErrorMsg] = useState(null);\n  // loading toggle\n  const [loading, setLoading] = useState(false);\n\n\n  /**\n   * onSubmit event handler\n   * Loads, reads, and parses file. Set loading state/message and error message when necessary.\n   */\n  const onSubmit = (event) => {\n    event.preventDefault();\n    \n    // set loading dialog\n    setLoading('Loading file');\n    const selectedFile = get(file, 'current.files[0]');\n\n    // set error message state accordingly\n    if (!selectedFile) {\n      setErrorMsg('Please choose a file to be .CSV file to be read');\n      setLoading(false);\n    } else {\n      setErrorMsg(null);\n\n      // read file\n      const fileReader = new FileReader();\n      fileReader.onloadend = () => {\n        // set loading dialog\n        setLoading('Parsing file');\n        // parse file  \n        const data = parseCSV(fileReader.result);\n        // set error message state accordingly\n        if (data.length === 0) {\n          setErrorMsg('Sorry, there was a problem parsing the CSV file.');\n        } else {\n          setErrorMsg(null);\n        }\n        // set data state\n        setData(data);\n\n        // hide loading dialogue\n        setLoading(false);\n      }\n\n      // set loading dialog\n      setLoading('Reading file');\n      fileReader.readAsText(selectedFile);\n    }\n  }\n\n  return (\n    <Wrapper className=\"App\">\n      <h1>CSV Bar Graph Mapper</h1>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"file\">CSV File</label>\n        <input type=\"file\" ref={file} accept=\".csv\" />\n        <ErrMsg pose={errMsg ? 'enter' : 'exit'}>{errMsg}</ErrMsg>\n        <button type=\"submit\">Update Graph</button>\n      </form>\n      <BarGraph data={data} />\n      <Loading className=\"loading\" pose={loading ? 'enter' : 'exit'}>{loading}</Loading>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","// parse-csv.js\n/**\n * External dependencies\n */\nimport { isEqual } from 'lodash';\n\n/**\n * Modified version of Ben Nadel's CSVToArray function\n * @link https://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n * \n * @param {string} strData - raw file string\n * @param {string} strDelimiter - csv file string delimiter\n * \n * @return {array}\n */\nexport default (strData, strDelimiter) => {\n  // Check to see if the delimiter is defined. If not,\n  // then default to comma.\n  strDelimiter = (strDelimiter || \",\");\n\n  // Create a regular expression to parse the CSV values.\n  const objPattern = new RegExp(\n    (\n      // Delimiters.\n      \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n      // Quoted fields.\n      \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n      // Standard fields.\n      \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n    ),\n    \"gi\"\n  );\n\n\n  // Create an array to hold our data. Give the array\n  // a default empty first row.\n  const arrData = [[]];\n\n  // Create an array to hold our individual pattern\n  // matching groups and process the first line.\n  let arrMatches;\n\n\n  // Keep looping over the regular expression matches\n  // until we can no longer find a match.\n  // eslint-disable-next-line no-cond-assign\n  while (arrMatches = objPattern.exec( strData )) {\n\n      // Get the delimiter that was found.\n      const strMatchedDelimiter = arrMatches[1];\n\n      // Check to see if the given delimiter has a length\n      // (is not the start of string) and if it matches\n      // field delimiter. If id does not, then we know\n      // that this delimiter is a row delimiter.\n      if (\n        strMatchedDelimiter.length &&\n        strMatchedDelimiter !== strDelimiter\n        ){\n\n        // Since we have reached a new row of data,\n        // add an empty row to our data array.\n        arrData.push([]);\n\n      }\n\n      let strMatchedValue;\n\n      // Now that we have our delimiter out of the way,\n      // let's check to see which kind of value we\n      // captured (quoted or unquoted).\n      if (arrMatches[2]){\n        // We found a quoted value. When we capture\n        // this value, unescape any double quotes.\n        strMatchedValue = arrMatches[2].replace(\n          new RegExp( \"\\\"\\\"\", \"g\" ),\n          \"\\\"\"\n        );\n      } else if (!isNaN(arrMatches[3])) {\n        strMatchedValue = parseInt(arrMatches[3], 10);\n      } else {\n        // We found a non-quoted value.\n        strMatchedValue = arrMatches[3];\n      }\n\n    // Now that we have our value string, let's add\n    // it to the data array.\n    arrData[arrData.length - 1].push(strMatchedValue);\n  }\n\n  // Return the parsed data.\n  if (isEqual(arrData[arrData.length - 1], [NaN], [''])) {\n    arrData.splice(-1);\n  }\n  return( arrData );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}